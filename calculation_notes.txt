Distance between points is calculated via the ‘haversine’ formula for great-circle distance 
between two points – that is, the shortest distance over the earth’s surface.

Haversine formula: 	

a = sin²(Δφ/2) + cos(φ1).cos(φ2).sin²(Δλ/2)
c = 2.atan2(√a, √(1−a))
d = R.c
where φ is latitude, λ is longitude, R is earth’s radius (mean radius = 6,371km)
  	note that angles need to be in radians to pass to trig functions!

Thus in the LLUV lattice, the distance between any two adjacent points is:

LATITUDE : 0.1112 km
LONGITUDE: 0.08798 km

Pythagorean distance: 0.1412 km

Conversion of u-v vectors to direction (D) and magnitude (M).

M = sqrt (u**2 + v**2)   where u & v are the component velocities in the ascii file, sqrt is the square root and **2 is a square

D = arctan(v/u) where arctan is the inverse of the tangent function.  The value of D will be in radians (+-pi)


Example cellular automaton calculation sequence.

STICKY THE STICK is dropped at point (37.820, -122.465), where the prevailing vector is:

    U (ew) = 7.6946000e+01  
    V (ns) = -1.5476000e+01
    
Calculating, we get a magnitude and direction of:

    Mag = 78.48690012989428
    Dir = 1.7692763277322927


Find destination point given distance and bearing from start point:

Given a start point, initial bearing, and distance, this will calculate the destination point 
and final bearing travelling along a (shortest distance) great circle arc.

Formula: 	φ2 = asin( sin(φ1)*cos(d/R) + cos(φ1)*sin(d/R)*cos(θ) )
  	λ2 = λ1 + atan2( sin(θ)*sin(d/R)*cos(φ1), cos(d/R)−sin(φ1)*sin(φ2) )

where 	φ is latitude, λ is longitude, θ is the bearing (in radians, clockwise from north), 
        d is the distance travelled, R is the earth’s radius (d/R is the angular distance, in radians)

JavaScript: 	

var lat2 = Math.asin( Math.sin(lat1)*Math.cos(d/R) + 
              Math.cos(lat1)*Math.sin(d/R)*Math.cos(brng) );
              
var lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(d/R)*Math.cos(lat1), 
                     Math.cos(d/R)-Math.sin(lat1)*Math.sin(lat2));

For final bearing, simply take the initial bearing from the end point to the start point and reverse it (using θ = (θ+180) % 360).
